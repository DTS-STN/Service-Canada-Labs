# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
- main

pool:
  vmImage: ubuntu-latest

variables:
  webapp.name: 'alphasite-appservice-dev'
  webapp.resourceGroup: 'AlphasiteAppserviceRG'
  webapp.slotName: 'pr-preview-$(System.PullRequest.PullRequestNumber)'
  azureContainerregistry.name: 'alphasiteCRdev'
  azureContainerregistry.repository: 'alphasite'
  azureContainerRegistry.domain: 'alphasitecrdev.azurecr.io'
  azureContainerRegistry.tag: 'preview-$(Build.SourceVersion)'

steps:
- task: GitHubComment@0
  displayName: "Let the requester know a preview is being dispatched via GitHub Comments"
  inputs:
    gitHubConnection: 'andr0272'
    repositoryName: 'service-canada'
    id: 'DTS-STN/Service-Canada-Labs'
    comment: 'A pull request preview is being generated. Hold tight!'
- task: Docker@2
  inputs:
    command: 'build'
    Dockerfile: '**/Dockerfile'
    buildContext: '**'
    containerRegistry: $(azureContainerregistry.name)
    repository: $(azureContainerregistry.repository)
    tags: $(azureContainerRegistry.tag)
    # TODO: make this into an env file
    arguments: |
      --build-arg TC_BUILD=$(ADO_BUILD) \
      --build-arg MONGO_DB=$(MONGO_DB) \
      --build-arg ADOBE_ANALYTICS_URL=$(ADOBE_ANALYTICS_URL) \
      --build-arg NEXT_PUBLIC_NOTIFY_REPORT_A_PROBLEM_EMAIL=$(NEXT_PUBLIC_NOTIFY_REPORT_A_PROBLEM_EMAIL) \
      --build-arg THANK_YOU_EMAIL=$(THANK_YOU_EMAIL) \
      --build-arg AEM_GRAPHQL_ENDPOINT=$(AEM_GRAPHQL_ENDPOINT) \
      --build-arg REVALIDATION_TOKEN=$(REVALIDATION_TOKEN) \
      --build-arg GIT_SHA=$(GIT_SHA)
- task: Docker@2
  inputs:
    command: 'push'
    containerRegistry: $(azureContainerregistry.name)
    repository: $(azureContainerregistry.repository)
    tags: $(azureContainerRegistry.tag)
- task: AzureCLI@2
  displayName: 'Create PR preview slot in App Service'
  inputs:
    azureSubscription: $(DECD_DEV_SUBSCRIPTION)
    scriptType: 'Bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az webapp deployment slot create \
      --name $(webapp.name) \
      --resource-group $(webapp.resourceGroup)\
      --slot $(webapp.slotName)
- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: $(DECD_DEV_SUBSCRIPTION)
    appType: 'webAppContainer'
    deployToSlotOrASE: true
    ResourceGroupName: $(webapp.resourceGroup)
    WebAppName: $(webapp.name)
    SlotName: $(webapp.slotName)
    DockerNamespace: '$(azureContainerregistry.name)'
    DockerRepository: $(azureContainerregistry.repository)
    DockerImageTag: $(azureContainerRegistry.tag)
# TODO: Update comment vs make new comment
- task: GitHubComment@0
  displayName: "add the webapp link to the PR via GitHub Comments"
  inputs:
    gitHubConnection: 'andr0272'
    repositoryName: 'service-canada'
    id: 'DTS-STN/Service-Canada-Labs'
    comment: "Check out a preview of your pull request here: https://$(webapp.name)-$(webapp.slotName).azurewebsites.net"
- task: AzureCLI@2
  displayName: 'Delete preview slot in App Service once the PR is closed'
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], 'Merged PR '))
  inputs:
    azureSubscription: $(DECD_DEV_SUBSCRIPTION)
    scriptType: 'Bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az webapp deployment slot delete \
      --name $(webapp.name) \
      --resource-group $(webapp.resourceGroup)\
      --slot $(webapp.slotName)